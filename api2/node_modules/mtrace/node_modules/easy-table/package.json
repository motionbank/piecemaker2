{
  "author": {
    "name": "Eldar Gabdullin",
    "email": "eldargab@gmail.com"
  },
  "name": "easy-table",
  "description": "Nice text table for the CLI",
  "keywords": [
    "table",
    "text",
    "cli"
  ],
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://eldargab@github.com/eldargab/easy-table.git"
  },
  "main": "./lib/table",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": "# Easy table\n\nSimple and nice utility for rendering text tables with javascript.\n\n## Usage\n\n``` javascript\nvar Table = require('easy-table');\n\nvar data = [\n    { id: 123123, desc: 'Something awesome', price: 1000.00 },\n    { id: 245452, desc: 'Very interesting book', price: 11.45},\n    { id: 232323, desc: 'Yet another product', price: 555.55 }\n]\n\nvar t = new Table;\n\ndata.forEach(function (product) {\n    t.cell('Product Id', product.id);\n    t.cell('Description', product.desc);\n    t.cell('Price, USD', product.price.toFixed(2), Table.padLeft);\n    t.newLine();\n});\n\nconsole.log(t.toString());\n```\n\nThe script above will render:\n\n```\nProduct Id  Description            Price, USD\n----------  ---------------------  ----------\n123123      Something awesome         1000.00\n245452      Very interesting book       11.45\n232323      Yet another product        555.55\n\n```\n\nThe full signature of `.cell()` method is:\n\n``` javascript\nt.cell(column, value, printer, width)\n```\n\nWhere `column` is a column name to print, `value` - cell's value, `printer` is\na function with which cell's value should be printed, `width` - column's width.\n\nBy default column's width is ajusted to fit the longest value, but if specified\nexplicitly it is fixed and any non-fitting cell is truncated.\n\nCell's value rendering occures in two phases. At the first phase `printer`\nfunction is called to get minimal width required to fit cell correctly, at the\nsecond phase `printer` function is called to get actual string to render with\nadditional `width` parameter supplied.\n\nYou can sort a table by calling `.sort()`, and optionally passing in a list of\ncolumn names to sort on (by default uses all columns), or a custom comparator\nfunction. It is also possible to specify the sort order. For example:\n\n``` javascript\nt.sort(['Price, USD|des']) // will sort in descending order\nt.sort(['Price, USD|asc']) // will sort in ascending order\nt.sort(['Price, USD']) // sorts in ascending order by default\n```\n\n## Installation\n\nJust install from the npm repository with:\n\n```\n$ npm install easy-table\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Eldar Gabdullin <eldargab@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "easy-table@0.0.3",
  "dist": {
    "shasum": "c40b0bf0e8e2914996978809acc6ba26d0531be9"
  },
  "_from": "easy-table@0.0.3",
  "_resolved": "https://registry.npmjs.org/easy-table/-/easy-table-0.0.3.tgz"
}
