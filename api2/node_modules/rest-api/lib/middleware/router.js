var _ = require('underscore');

module.exports = function router(api) {

  return function(req, res, next) {

    // get the very basic details needed for routing process
    try {
      var _pathname = req._parsedUrl.pathname.split('.'); // i.e. /user/1.json
      var request = {
        verb: req.method.toUpperCase(),
        route: _pathname.shift(), 
        format: _pathname.length > 0 ? _pathname.shift() : null,
        params: [] // push params later
      };
      delete _pathname;

      if(request.route.indexOf('/') !== 0) request.route = '/' + request.route;
      request.route = request.route.split('/').slice(1);

    } catch(e) {
      throw new Error('unable to parse request');
    }

    // no route?
    if(request.route.length < 1) throw new ClientError({status: 404, messag: 'not found'});

    // verb okay?
    if(!~HTTP_VERBS.indexOf(request.verb)) throw new ClientError({status: 404, message: 'not found'});

    // valid format from url?
    if(request.format) { // if format was provided in url
      if(_.has(FORMATS, request.format)) {
        request.format = FORMATS[request.format];
      } else {
        throw new ClientError({status: 404, message: 'not found'});
      }      
    } else {
      // okay, maybe client sent format in headers?
      if(_.has(req.headers, 'accept') && _.contains(FORMATS, req.headers.accept)) {
        request.format = req.headers.accept;
      } else {
        throw new ClientError({status: 404, message: 'not found'});
      }      
    }
    
    // controller exists?
    if(!api.controllers.hasOwnProperty(request.route[0])) throw new ClientError({status: 404, message: 'not found'});

    // is this an alias? get the actual controller name ...
    var controllerName = typeof api.controllers[request.route[0]] === 'string' ? api.controllers[request.route[0]] : request.route[0];

    // convenience check: controller still exists?
    if(!api.controllers.hasOwnProperty(controllerName)) throw new ClientError({status: 404, message: 'not found'});

    // okay, looks good so far, check the actual routes from this controller ...
    var controller = null; // holds the matched controller, once found
    var controllersRoutesLength = api.controllers[controllerName].length;
    for(var i=0; i < controllersRoutesLength; i++) {

      // verbs match?
      if(api.controllers[controllerName][i]['verb'] != request.verb) 
        continue; // to next route from this controller

      // route length matches?
      var controllerRouteLength = api.controllers[controllerName][i]['route'].length
      if(controllerRouteLength != request.route.length) 
        continue; // to next route from this controller

      // dig deeper ... compare every single route element 
      // from this controller with the request.route elements
      request.params['url'] = {};
      var match = true;
      for(var j=0; j < controllerRouteLength; j++) {

        // fixed string?
        if(api.controllers[controllerName][i]['route'][j] == request.route[j])
          continue; // to next element

        // variable starting with : ?
        if(api.controllers[controllerName][i]['route'][j].indexOf(':') === 0) {
          request.params['url'][api.controllers[controllerName][i]['route'][j].slice(1)] = request.route[j];
          continue; // to next element
        }

        // this point is reached? route element didnt match!
        match = false;
        break;
      }

      // route elements have been compared against each another
      // did we find a match?
      if(match) {
        // ... yes! awesome! so, this is our route:
        controller = api.controllers[controllerName][i];
        break; // because no further routes from this controller must be checked
      } 
    }

    // did we find a route/controller?
    if(!controller) throw new ClientError({status: 404, message: 'not found'});

    // ... and is it a function?
    if(!_.isFunction(controller.function)) throw new Error('controller is missing a function');
    
    // okay, very cool, just add some params    
    request.params['query'] = req.query || {};
    request.params['body'] = req.body || {};
        
    req['api']['request'] = request;
    req['api']['params'] = _.extend(request.params.body, request.params.query); // query will overwrite body;
    req['api']['controller'] = controller;

    next();

  }
};