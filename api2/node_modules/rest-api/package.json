{
  "name": "rest-api",
  "version": "0.0.2",
  "description": "Fast & lightweight RESTful API framework in Node.js",
  "main": "./lib/api.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "connect": "2.7.3",
    "mysql": "2.0.x",
    "underscore": "1.4.x",
    "async": "0.2.6"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mattes/node-rest-api.git"
  },
  "keywords": [
    "REST",
    "RESTful",
    "api",
    "node",
    "nodejs",
    "lightweight",
    "fast"
  ],
  "homepage": "https://github.com/mattes/node-rest-api",
  "author": {
    "name": "Matthias Kadenbach",
    "email": "matthias.kadenbach@gmail.com",
    "url": "https://github.com/mattes"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# node-rest-api\n\nFast & lightweight RESTful API framework in Node.js. It's built on top of [connect](http://www.senchalabs.org/connect/).\n\n__Do not use it for production__, yet! Its still under heavy development!\n\n## What it does ...\n\nPut all your routes and controller logics somewhere and let the framework do the rest.\n\n__controllers/user.js__\n```js\nmodule.exports = {\n  \n  'GET /user/:id':\n  function($, id) {\n    // return user with id\n    $.render({id: id, name: 'fake user'});\n  },\n  \n  'POST /user':\n  function($) {\n    // create a new user with data from $.params\n    $.error(501, 'oh, that went wrong?!');\n  }\n\n  // ... all your other awesome stuff\n}\n```\n\n__index.js__\n```js\nvar API = require('rest-api'); \nvar api = new API();\napi.start();\n```\n\n__Terminal__\n```\ncurl -X GET http://127.0.0.1:8080/user/123 -> {id: 123, name: 'fake user'}\ncurl -X POST http://127.0.0.1:8080/user -> http status 501\n```\n\n## Installation\n@TODO\n\n## Full Code Documentation\n@TODO\n\n## Hooks\n\nYou can easily extend the API flow with hooks. Need authorization?\n\n```js\napi.beforeFunctionCall('AUTH', function(api, req, res, next){\n  if(req.api.params.user == 'fake.user' && req.api.params.password == 'random password') {\n    next(); // cool, you are logged in!\n  } else {\n    throw new ClientError({status: 403, message: 'invalid login'}); // :-(\n  }\n});\n```\n\nAdd the __AUTH flag__ to your route in __controllers/user.js__\n```js\nmodule.exports = {\n  'GET AUTH /user/:id':\n  function($, id) {\n    // i am safe\n    $.render({id: id, name: 'fake user'});\n  }\n}\n```\n\nPossible hooks include: ```beforeFunctionCall([flag,] func)```, ```beforeRender([flag,] func)``` and ```beforeResponse([flag,] func)```.\nCalling without a flag will trigger the hook for every route. You can use as many flags in your route as you want.\n\n## Connect Middlewares\n@TODO\n\n\n## API Flow\n@TODO\n\n## Routing Algorithm\n@TODO\n\n## Error Throwing\n\nThe framework never crashes as long as you throw errors correctly. \n\n### Errors in Controllers\nlike controllers/user.js from above\n\n * ```return $.error(404, 'i cant find it');```\n * ```return $.internalError('note for internal error logs');```\n * ```return $.internalError(new Error('pass errors directly'));```\n * prepend ```return``` to stop execution in your controller!\n * you can crash the app intentionally with something like this in your controller ```throw new Error('crash')```\n\n### Errors in Hooks and Middlewares\n\n * ```throw new ClientError({status: 404, message: 'i cant find it'});```\n * ```throw new Error('note for internal error logs');```\n\n\nValid http status codes can be found here http://www.iana.org/assignments/http-status-codes/http-status-codes.xml\n\nThe framework will through 500 http codes and 404s if no route was found during routing process. Anything else is up to your own controllers.\n\n## Development vs Production environment\n@TODO\n\n## Content-Types/ Accept/ Formats\n@TODO\n\n\n## Dependencies\n@TODO\n\n## Testing Tools\n\n * http-console (https://github.com/cloudhead/http-console)\n\n## License\nMIT License\n",
  "_id": "rest-api@0.0.2",
  "_from": "rest-api@0.0.2",
  "dist": {
    "shasum": "e215d7bed0b463d9ac3234b3c67dd729e285867b"
  },
  "_resolved": "https://registry.npmjs.org/rest-api/-/rest-api-0.0.2.tgz"
}
